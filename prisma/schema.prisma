generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model account {
  id_account         Int                  @id @default(autoincrement())
  email_address      String?              @unique(map: "Account_UN") @db.VarChar(255)
  password           String?              @db.VarChar(255)
  Firstname          String?              @db.VarChar(50)
  Lastname           String?              @db.VarChar(50)
  id_organization    Int
  organization       organization         @relation(fields: [id_organization], references: [id_organization], onDelete: NoAction, onUpdate: NoAction, map: "account_ibfk_1")
  account_exercise   account_exercise[]
  account_role       account_role[]
  account_step       account_step[]
  federation_account federation_account[]
  notification       notification[]

  @@index([id_organization], map: "id_organization")
}

model account_exercise {
  id_account  Int
  id_exercise Int
  repo_name   String?  @db.VarChar(255)
  archived    Boolean
  join_date   DateTime @db.DateTime(0)
  account     account  @relation(fields: [id_account], references: [id_account], onDelete: Cascade, onUpdate: NoAction, map: "account_exercise_ibfk_1")
  exercise    exercise @relation(fields: [id_exercise], references: [id_exercise], onDelete: NoAction, onUpdate: NoAction, map: "account_exercise_ibfk_2")

  @@id([id_account, id_exercise])
  @@index([id_exercise], map: "id_exercise")
}

model account_role {
  id_account Int
  id_role    Int
  account    account @relation(fields: [id_account], references: [id_account], onDelete: Cascade, onUpdate: NoAction, map: "account_role_ibfk_1")
  role       role    @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "account_role_ibfk_2")

  @@id([id_account, id_role])
  @@index([id_role], map: "id_role")
}

model account_step {
  id_account  Int
  id_exercise Int
  num_order   Int      @db.TinyInt
  last_status String?  @db.VarChar(50)
  is_done     Boolean?
  account     account  @relation(fields: [id_account], references: [id_account], onDelete: Cascade, onUpdate: NoAction, map: "account_step_ibfk_1")
  step        step     @relation(fields: [id_exercise, num_order], references: [id_exercise, num_order], onDelete: NoAction, onUpdate: NoAction, map: "account_step_ibfk_2")

  @@id([id_account, id_exercise, num_order])
  @@index([id_exercise, num_order], map: "id_exercise")
}

model exercise {
  id_exercise      Int                @id @default(autoincrement())
  title            String?            @db.VarChar(50)
  description      String?            @db.VarChar(255)
  repo_name        String?            @db.VarChar(255)
  account_exercise account_exercise[]
  step             step[]
}

model federation {
  id_federation      Int                  @id @default(autoincrement())
  federation_name    String               @db.VarChar(50)
  federation_account federation_account[]
}

model federation_account {
  id_account    Int
  id_federation Int
  account       account    @relation(fields: [id_account], references: [id_account], onDelete: NoAction, onUpdate: NoAction, map: "federation_account_ibfk_1")
  federation    federation @relation(fields: [id_federation], references: [id_federation], onDelete: NoAction, onUpdate: NoAction, map: "federation_account_ibfk_2")

  @@id([id_account, id_federation])
  @@index([id_federation], map: "id_federation")
}

model notification {
  id_Notification Int       @id @default(autoincrement())
  creation_date   DateTime? @db.DateTime(0)
  title           String?   @db.VarChar(50)
  content         String?   @db.VarChar(255)
  icon            String?   @db.VarChar(50)
  action          String?   @db.VarChar(255)
  readed          Boolean?
  id_account      Int
  account         account   @relation(fields: [id_account], references: [id_account], onDelete: NoAction, onUpdate: NoAction, map: "notification_ibfk_1")

  @@index([id_account], map: "id_account")
}

model organization {
  id_organization   Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(100)
  account           account[]
  organization_role organization_role[]
}

model organization_role {
  id_organization Int
  id_role         Int
  organization    organization @relation(fields: [id_organization], references: [id_organization], onDelete: NoAction, onUpdate: NoAction, map: "organization_role_ibfk_1")
  role            role         @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "organization_role_ibfk_2")

  @@id([id_organization, id_role])
  @@index([id_role], map: "id_role")
}

model permission {
  code_permission String            @id @db.VarChar(50)
  description     String?           @db.VarChar(255)
  role_permission role_permission[]
}

model role {
  id_role           Int                 @id @default(autoincrement())
  Name              String?             @db.VarChar(50)
  account_role      account_role[]
  organization_role organization_role[]
  role_permission   role_permission[]
}

model role_permission {
  id_role         Int
  code_permission String     @db.VarChar(50)
  role            role       @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "role_permission_ibfk_1")
  permission      permission @relation(fields: [code_permission], references: [code_permission], onDelete: NoAction, onUpdate: NoAction, map: "role_permission_ibfk_2")

  @@id([id_role, code_permission])
  @@index([code_permission], map: "code_permission")
}

model step {
  id_exercise  Int
  num_order    Int            @db.TinyInt
  title        String?        @db.VarChar(50)
  description  String?        @db.VarChar(255)
  account_step account_step[]
  exercise     exercise       @relation(fields: [id_exercise], references: [id_exercise], onDelete: NoAction, onUpdate: NoAction, map: "step_ibfk_1")

  @@id([id_exercise, num_order])
}
