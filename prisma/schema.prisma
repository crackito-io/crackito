generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model account {
  id_account         Int                  @id @default(autoincrement())
  email_address      String?              @unique(map: "email_address") @db.VarChar(255)
  password           String?              @db.VarChar(255)
  Firstname          String?              @db.VarChar(50)
  Lastname           String?              @db.VarChar(50)
  username           String               @unique(map: "username") @db.VarChar(50)
  id_organization    Int
  organization       organization         @relation(fields: [id_organization], references: [id_organization], onDelete: NoAction, onUpdate: NoAction, map: "account_ibfk_1")
  account_role       account_role[]
  account_team       account_team[]
  federation_account federation_account[]
  notification       notification[]
  project            project[]

  @@index([id_organization], map: "id_organization")
}

model account_role {
  id_account Int
  id_role    Int
  account    account @relation(fields: [id_account], references: [id_account], onDelete: NoAction, onUpdate: NoAction, map: "account_role_ibfk_1")
  role       role    @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "account_role_ibfk_2")

  @@id([id_account, id_role])
  @@index([id_role], map: "id_role")
}

model federation {
  id_federation      Int                  @id @default(autoincrement())
  federation_name    String               @db.VarChar(50)
  id_organization    Int
  organization       organization         @relation(fields: [id_organization], references: [id_organization], onDelete: NoAction, onUpdate: NoAction, map: "federation_ibfk_1")
  federation_account federation_account[]

  @@index([id_organization], map: "id_organization")
}

model federation_account {
  id_account    Int
  id_federation Int
  account       account    @relation(fields: [id_account], references: [id_account], onDelete: NoAction, onUpdate: NoAction, map: "federation_account_ibfk_1")
  federation    federation @relation(fields: [id_federation], references: [id_federation], onDelete: NoAction, onUpdate: NoAction, map: "federation_account_ibfk_2")

  @@id([id_account, id_federation])
  @@index([id_federation], map: "id_federation")
}

model notification {
  id_Notification Int       @id @default(autoincrement())
  creation_date   DateTime? @db.DateTime(0)
  title           String?   @db.VarChar(50)
  content         String?   @db.VarChar(255)
  icon            String?   @db.VarChar(50)
  action          String?   @db.VarChar(255)
  readed          Boolean?
  id_account      Int
  account         account   @relation(fields: [id_account], references: [id_account], onDelete: NoAction, onUpdate: NoAction, map: "notification_ibfk_1")

  @@index([id_account], map: "id_account")
}

model organization {
  id_organization   Int                 @id @default(autoincrement())
  name              String?             @db.VarChar(100)
  account           account[]
  federation        federation[]
  organization_role organization_role[]
}

model organization_role {
  id_organization Int
  id_role         Int
  organization    organization @relation(fields: [id_organization], references: [id_organization], onDelete: NoAction, onUpdate: NoAction, map: "organization_role_ibfk_1")
  role            role         @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "organization_role_ibfk_2")

  @@id([id_organization, id_role])
  @@index([id_role], map: "id_role")
}

model permission {
  code_permission String            @id @db.VarChar(50)
  description     String?           @db.VarChar(255)
  role_permission role_permission[]
}

model role {
  id_role           Int                 @id @default(autoincrement())
  Name              String?             @db.VarChar(50)
  account_role      account_role[]
  organization_role organization_role[]
  role_permission   role_permission[]
}

model role_permission {
  id_role         Int
  code_permission String     @db.VarChar(50)
  role            role       @relation(fields: [id_role], references: [id_role], onDelete: NoAction, onUpdate: NoAction, map: "role_permission_ibfk_1")
  permission      permission @relation(fields: [code_permission], references: [code_permission], onDelete: NoAction, onUpdate: NoAction, map: "role_permission_ibfk_2")

  @@id([id_role, code_permission])
  @@index([code_permission], map: "code_permission")
}

model step {
  repo_name   String  @db.VarChar(255)
  id_step     Int     @unique(map: "id_step") @default(autoincrement())
  title       String? @db.VarChar(50)
  description String? @db.VarChar(50)
  num_order   Int?    @db.TinyInt
  test_number Int?
  project     project @relation(fields: [repo_name], references: [repo_name], onDelete: NoAction, onUpdate: NoAction, map: "step_ibfk_1")
  test        test[]

  @@id([repo_name, id_step])
}

model account_team {
  id_account Int
  id_team    Int
  account    account @relation(fields: [id_account], references: [id_account], onDelete: NoAction, onUpdate: NoAction, map: "account_team_ibfk_1")
  team       team    @relation(fields: [id_team], references: [id_team], onDelete: NoAction, onUpdate: NoAction, map: "account_team_ibfk_2")

  @@id([id_account, id_team])
  @@index([id_team], map: "id_team")
}

model project {
  repo_name      String    @id @db.VarChar(255)
  name           String?   @db.VarChar(50)
  description    String?   @db.VarChar(255)
  status_open    Boolean
  webhook_secret String?   @db.VarChar(50)
  end_time       DateTime? @db.DateTime(0)
  id_account     Int
  account        account   @relation(fields: [id_account], references: [id_account], onDelete: NoAction, onUpdate: NoAction, map: "project_ibfk_1")
  step           step[]
  team           team[]

  @@index([id_account], map: "id_account")
}

model team {
  id_team                 Int            @id @default(autoincrement())
  team_repo_name          String?        @db.VarChar(50)
  last_commit             DateTime?      @db.DateTime(0)
  repo_name               String         @db.VarChar(255)
  join_project_at         DateTime?      @db.DateTime(0)
  status_project_finished Boolean?
  account_team            account_team[]
  project                 project        @relation(fields: [repo_name], references: [repo_name], onDelete: NoAction, onUpdate: NoAction, map: "team_ibfk_1")
  test                    test[]

  @@index([repo_name], map: "repo_name")
}

model test {
  id_team          Int
  repo_name        String   @db.VarChar(255)
  id_step          Int
  test_name        String   @db.VarChar(50)
  status_passed    Boolean?
  message          String?  @db.VarChar(50)
  detailed_message String?  @db.VarChar(50)
  team             team     @relation(fields: [id_team], references: [id_team], onDelete: NoAction, onUpdate: NoAction, map: "test_ibfk_1")
  step             step     @relation(fields: [repo_name, id_step], references: [repo_name, id_step], onDelete: NoAction, onUpdate: NoAction, map: "test_ibfk_2")

  @@id([id_team, repo_name, id_step, test_name])
  @@index([repo_name, id_step], map: "repo_name")
}
